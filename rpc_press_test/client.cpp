/* APP.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-22
 * Author: zhangqiyin/Konishi
 * Email : zhangqiyin@hangsheng.com.cn
 */
#include <stdio.h>
#include <string>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/time.h>
#include "client.h"


#define MAX_TEST_PROCESS  2
ERPC *Client::m_rpc = NULL;
string Client::m_name;

Client::Client()
{
    thread_id = 0;
    m_name.clear();
    m_name = string(APPNAME);
}

Client::Client(string name)
{
    thread_id = 0;
    m_name.clear();
    m_name = string(name);
}

Client::~Client()
{
    thread_id = 0;
    m_name.clear();
}

int Client::startBussiness(ERPC *rpc)
{
    m_rpc = rpc;
    if(pthread_create(&thread_id, NULL, appBusiness, NULL) != 0)
        return -1;

    return 0;
}

void *Client::appBusiness(void *arg)
{
    int i = 0;
    int result = -1;
    char recv[1024];
    float timeuse = 0.0;
    size_t recvlen = 1024;
    //unsigned int count = 0;
	char str_buffer[50] = {0};
	char send_buffer[50] = {0};
    struct timeval start, end;
    unsigned int send = 0;
    unsigned int recv_num = 0;

    sleep(3);
    //printf("\n %s Call service !\n", m_name.c_str());

REPEAT:
    gettimeofday(&start, NULL);
    while(send < 10000)
    {
    	for(i = 0;i < MAX_TEST_PROCESS; i++)
		{
		    recvlen = 1024;
			memset(str_buffer, 0, 50);
			memset(send_buffer, 0, 50);
			snprintf(str_buffer,sizeof(str_buffer), "test%dmodule", i);
			memcpy(send_buffer,(char *)(&send) , sizeof(int));
	        result = m_rpc->proxyCall(string(str_buffer), string("ModuleInterface"), (void *)send_buffer, sizeof(int), (void *)recv, &recvlen);
			recv_num = 0;
			memcpy((char *)(&recv_num), recv, sizeof(int));
            if(result != 0)
            {
                printf("\n%s call %s failed at %u!\n", m_name.c_str(), str_buffer, send);
            }
	        else if(send != recv_num)
	        {
	    		printf("\nsend(%u) != recv_num(%u)\n", send, recv_num);
	        }
	        send++;
		}
    }
    gettimeofday(&end, NULL);
    timeuse = (1000000*(end.tv_sec - start.tv_sec) + (float)(end.tv_usec - start.tv_usec))/1000;
    printf("--------- %s remote call timeuse:%2.03f ms count:[%u]---------\n", m_name.c_str(), timeuse, recv_num);
    send = 0;
    goto REPEAT;

    pthread_exit(NULL);
}

