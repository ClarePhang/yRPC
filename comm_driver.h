/* comm_driver.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-09
 * Author: zhangqiyin/Konishi
 * Email : zhangqiyin@hangsheng.com.cn
 */

#ifndef COMM_DRIVER_H__
#define COMM_DRIVER_H__
#include <stdio.h>

#include "event.h"
#include "event2/util.h"
#include "event2/event.h"
#include "event2/buffer.h"
#include "event2/thread.h"
#include "event2/listener.h"
#include "event2/bufferevent.h"

#include "socketbase.h"

#define DEFAULT_CHECK_CYCLE   15  // check socket status every 15 second

enum SocketMethod{NOSOCKET,TCPSOCKET, LOCALSOCKET};

class CommDriver : public SocketBaseOpt
{
public:
    CommDriver();
    ~CommDriver();

public: // interface
    void showVersion(void);
    int createServer(const char *path);
    int createServer(const char *ip, unsigned int port);
    void destroyServer(void);
    int connectServer(const char *path);
    int connectServer(const char *ip, unsigned int port);
    void disconnectServer(const char *path_or_ip);
    int sendData(const char *server, const void *data, size_t size);

private:  // function
    int createThread(void);
    void destroyThread(void);
    int initEventBase(evconnlistener_cb listener_cb, struct sockaddr *s_addr, size_t s_len);
    void deinitEventBase(void);
    int initTimingCheckHandler(void);
    void deinitTimingCheckHandler(void);
    int startConnect(struct sockaddr *s_addr, size_t s_len);

private:  // static function
    static void *commEventThread(void *arg);
    static void *acceptEventThread(void *arg);
    static void timingCheckHandler(evutil_socket_t fd, short event, void *arg);
    static void listenerHandler(struct evconnlistener *listener, evutil_socket_t fd,
                                struct sockaddr *sa, int socklen, void *user_data);
    static void readCallback(struct bufferevent *bev, void *user_data);
    static void writeCallback(struct bufferevent *bev, void *user_data);
    static void eventCallback(struct bufferevent *bev, short events, void *user_data);

private:  // variable
    volatile bool init_flag;
    pthread_t comm_thread_id;
    pthread_t accept_thread_id;
    struct event *timing_check;
    struct event_base *comm_base;
    struct event_base *accept_base;
    struct evconnlistener *listener;

private:  // static variable
    static volatile SocketMethod socket_method;
};

#endif //SOCKET_SERVER_H__

