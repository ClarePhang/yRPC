/* socketserver.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-09
 * Author: zhangqiyin/Konishi
 * Email : zhangqiyin@hangsheng.com.cn
 */

#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <sys/un.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

//#include <signal.h>

#include "socketserver.h"

volatile SocketMethod SocketServer::socket_method = NOSOCKET;

SocketServer::SocketServer()
{
    init_flag = false;
    timing_check = NULL;
    server_base  = NULL;
    accept_base  = NULL;
    listener     = NULL;
    server_thread_id = 0;
    accept_thread_id = 0;
}

SocketServer::~SocketServer()
{
    init_flag = false;
    timing_check = NULL;
    server_base  = NULL;
    accept_base  = NULL;
    listener     = NULL;    
    server_thread_id = 0;
    accept_thread_id = 0;
}

void SocketServer::showVersion(void)
{
    const char **a = event_get_supported_methods();
    printf("Server : System supported methods:\n");
    for(int i = 0; a[i] != NULL; i++)
        printf("  [%s]\n",a[i]);
    // use method:   notice
    // version
}

int SocketServer::serverCreate(const char *server)
{
    struct sockaddr_un su_addr;

    if(initSockaddr(su_addr, server) < 0)
        goto CREATE_FAILED;
    
    if(initEventBase(listenerHandler, (struct sockaddr *)&su_addr, sizeof(su_addr)) < 0)
        goto CREATE_FAILED;

    if(createThread() < 0)
        goto CREATE_FAILED;

    socket_method = LOCALSOCKET;
    return 0;
    
CREATE_FAILED:
    destroyThread();
    deinitEventBase();
    return -1;
}

int SocketServer::serverCreate(const char *server, unsigned int port)
{
    struct sockaddr_in si_addr;

    if(initSockaddr(si_addr, server, port) < 0)
        goto CREATE_FAILED;

    if(initEventBase(listenerHandler, (struct sockaddr *)&si_addr, sizeof(si_addr)) < 0)
        goto CREATE_FAILED;

    if(createThread() < 0)
        goto CREATE_FAILED;

    socket_method = TCPSOCKET;
    return 0;
    
CREATE_FAILED:
    destroyThread();
    deinitEventBase();
    return -1;
}

void SocketServer::serverDestroy(void)
{
    destroyThread();
    deinitEventBase();
}

int SocketServer::createThread(void)
{
//    int kill_server = -1, kill_accept = -1;
    
    if(pthread_create(&server_thread_id, NULL, serverEventThread, server_base) != 0)
	{
		printf("Server : pthread_create failed, errno:%d,error:%s.\n", errno, strerror(errno));
		return -1;
	}
    if(pthread_create(&accept_thread_id, NULL, acceptEventThread, accept_base) != 0)
	{
		printf("Server : pthread_create failed, errno:%d,error:%s.\n", errno, strerror(errno));
		return -1;
	}
/*
    //wait thead running
    while(true)
    {
//        #include <signal.h>
        int pthread_kill(pthread_t thread, int sig);
        usleep(2*1000);
        kill_server = pthread_kill(server_thread_id, 0);
        kill_accept = pthread_kill(accept_thread_id, 0);
        if((ESRCH != kill_server) && (EINVAL != kill_server) &&
           (ESRCH != kill_accept) && (EINVAL != kill_accept))
           break;
        else
            printf("Thread has not running.\n");
    }
*/
    return 0;
}

void SocketServer::destroyThread(void)
{
    if(accept_thread_id != 0)
    {
        event_base_loopexit(accept_base, NULL);
        pthread_join(accept_thread_id, NULL);
        accept_thread_id = 0;
    }
    if(server_thread_id != 0)
    {
        event_base_loopexit(server_base, NULL);
        pthread_join(server_thread_id, NULL);
        server_thread_id = 0;
    }
}

/*
 * para: s_addr can be a sockaddr_in or sockaddr_un, s_len is the length of it.
 */
int SocketServer::initEventBase(evconnlistener_cb listener_cb, struct sockaddr *s_addr, size_t s_len)
{
    // if env set, then open debug   notice
    event_enable_debug_mode();
    event_enable_debug_logging(0);

    evthread_use_pthreads();  //enable threads

    server_base = event_base_new();
    if(!server_base)
    {
        printf("Server : new server_event_base failed!\n");
        goto INIT_EVENT_FAILED;
    }
    
    accept_base = event_base_new();
    if(!accept_base)
    {
        printf("Server : new accept_event_base failed!\n");
        goto INIT_EVENT_FAILED;
    }
    
    evthread_make_base_notifiable(server_base);
    evthread_make_base_notifiable(accept_base);

    listener = evconnlistener_new_bind(accept_base, listener_cb,(void *)server_base,
        LEV_OPT_REUSEABLE|LEV_OPT_REUSEABLE_PORT|LEV_OPT_THREADSAFE|BEV_OPT_CLOSE_ON_FREE,
        -1, s_addr, s_len);
    if(!listener)
    {
        printf("Server : new event_listener failed!\n");
        goto INIT_EVENT_FAILED;
    }

    if(initTimingCheckHandler() < 0)
        goto INIT_EVENT_FAILED;
    
    return 0;
    
INIT_EVENT_FAILED:
    deinitTimingCheckHandler();
    deinitEventBase();
    return -1;
}

void SocketServer::deinitEventBase(void)
{
    printf("failed\n");
    if(listener)
    {
        evconnlistener_free(listener);
        listener = NULL;
    }
    if(server_base)
    {
        event_base_free(server_base);
        server_base = NULL;
    }
    if(accept_base)
    {
        event_base_free(accept_base);
        accept_base = NULL;
    }
}

int SocketServer::initTimingCheckHandler(void)
{
    struct timeval tv = {DEFAULT_CHECK_CYCLE, 0};

    // if env set, then change default check cycle  notice
    // tv.tv_second = ;

    timing_check = (struct event *)malloc(sizeof(struct event));
    if(!timing_check)
    {
        printf("Server : new timint check event failed!\n");
        return -1;
    }
    if(evtimer_assign(timing_check, server_base, timingCheckHandler, timing_check) < 0)
    {
        printf("Server : new timint check event failed!\n");
        goto INIT_TIMING_FAILED;
    }
    if(evtimer_add(timing_check, &tv) < 0)
    {
        printf("Server : add timing check handler to server_base failed!\n");
        goto INIT_TIMING_FAILED;
    }

    init_flag = true;
    return 0;
    
INIT_TIMING_FAILED:
    deinitTimingCheckHandler();
    return -1;
}

void SocketServer::deinitTimingCheckHandler(void)
{
    if(init_flag)
    {
        init_flag = false;
        evtimer_del(timing_check);
    }
    if(timing_check)
    {
        free(timing_check);
        timing_check = NULL;
    }
}

void *SocketServer::serverEventThread(void *arg)
{
    struct event_base *base = (struct event_base *)arg;
    
    printf("Server : server event-loop id:%lu\n",pthread_self());
    printf("Server : server event-base addr = 0x%p\n",base);
    
    event_base_dispatch(base);
    
    printf("Server : server event-loop exit.\n");
    pthread_exit(NULL);
}

void *SocketServer::acceptEventThread(void *arg)
{
    struct event_base *base = (struct event_base *)arg;
    
    printf("Server : accept event-loop id:%lu\n",pthread_self());
    printf("Server : accept event-base addr = 0x%p\n",base);
    
    event_base_dispatch(base);
    
    printf("Server : accept event-loop exit.\n");
    pthread_exit(NULL);
}

void SocketServer::timingCheckHandler(evutil_socket_t fd, short event, void *arg)
{
    struct timeval tv = {DEFAULT_CHECK_CYCLE,0};
    struct event *base = (struct event *)arg;
    
    printf("\nServer : check network:%p\n",arg);
    evtimer_add(base, &tv);
}

void SocketServer::listenerHandler(struct evconnlistener *listener, evutil_socket_t fd,
                                   struct sockaddr *sa, int socklen, void *user_data)
{
    struct bufferevent *bev = NULL;
    struct event_base *base = (struct event_base *)user_data;

    switch(socket_method)
    {
        case TCPSOCKET:
            printf("Server : New connecting from %s:%d\n",
                   inet_ntoa(((sockaddr_in *)sa)->sin_addr),
                   ntohs(((sockaddr_in *)sa)->sin_port));
            break;
        case LOCALSOCKET:
            printf("Server : New connecting from :%s\n", 
                ((sockaddr_un *)sa)->sun_path);
            break;
        default:
            printf("Server : New connecting error, not socket!\n");
            return ;
    }

    bev = bufferevent_socket_new(base, fd, LEV_OPT_THREADSAFE | BEV_OPT_CLOSE_ON_FREE);
    if(!bev)
    {
        printf("Server : Could not create new bufferevent!\n");
        return ;
    }

    // set communication timeout if needed
    struct timeval tv_read = {15, 0}, tv_write = {13, 0};
    bufferevent_set_timeouts(bev, &tv_read,&tv_write);

    //BEV_OPT_THREADSAFE support
    int ret = bufferevent_enable(bev, BEV_OPT_THREADSAFE);
    if(ret < 0)
    {
        printf("Server : enable bufferevent BEV_OPT_THREADSAFE failed!\n");
        bufferevent_free(bev);
        return ;
    }

    printf("Server : new bufferevent addr :%p\n",bev);
    // set readcb, writecb and errcb
    bufferevent_setcb(bev, readCallback, writeCallback, eventCallback, NULL);
    bufferevent_enable(bev, EV_READ | EV_WRITE);
}

void SocketServer::readCallback(struct bufferevent *bev, void *user_data)
{
    struct evbuffer *input = bufferevent_get_input(bev);
    size_t sz = evbuffer_get_length(input);
    
    printf("\nServer : readCallback thread: %lu\n",pthread_self());
    printf("Server : bufferevent addr :%p\n",bev);

    if(sz > 0)
    {
        // here use c++ virtual function   notice
        char msg[1024] = {'\0'};
        int readlen = 1024 > sz ? sz : 1024;
        bufferevent_read(bev, msg, readlen);
        printf("Server : recv %d, %s .\n",readlen, msg);
    }
}

void SocketServer::writeCallback(struct bufferevent *bev, void *user_data)
{
    struct evbuffer *output = bufferevent_get_output(bev);

    printf("\nServer : writeCallback thread: %lu\n",pthread_self());
    printf("Server : bufferevent addr :%p\n",bev);
    
    if(evbuffer_get_length(output) == 0)
    {
        printf("Server : Output evbuffer is flushed.\n");
        return;
    }
}

void SocketServer::eventCallback(struct bufferevent *bev, short events, void *user_data)
{
    printf("\nServer : eventCallback thread: %lu\n",pthread_self());
    printf("Server : bufferevent addr :%p\n",bev);

    if(events & BEV_EVENT_EOF)
    {
        printf("Server : Connection closed!\n");
    }
    else if(events & BEV_EVENT_CONNECTED)
    {
        printf("Server : New connection finishi!\n");
        return ;  // normal condition
    }
    else if(events & BEV_EVENT_ERROR)
    {
        printf("Server : Got error on the connection:%s\n",strerror(errno));
        //printf("Server : Got error on the connection:%s\n",evutil_socket_error_to_string(EVUTIL_SOCKET_ERROR()));
    }
    else if(events & BEV_EVENT_TIMEOUT)
    {
        if(events & BEV_EVENT_READING)  // read timeout
        {
            printf("Server : read data from %p timeout!\n", bev);
        }
        else if(events & BEV_EVENT_WRITING)
        {
            printf("Server : write data from %p timeout!\n", bev);
        }
        // if timeout, event will disable read/write,so:
        if(!(bufferevent_get_enabled(bev) & EV_READ))
        {
            printf("Server : reenable %p readable.\n",bev);
            bufferevent_enable(bev, EV_READ);
        }
        if(!(bufferevent_get_enabled(bev) & EV_WRITE))
        {
            printf("Server : reenable %p writeable.\n",bev);
            bufferevent_enable(bev, EV_WRITE);
        }
        return ;  // normal condition
    }
    else
    {
        printf("Server : Got unknown error on the connection:%s\n",strerror(errno));
        //printf("Server : Got unknown error on the connection:%s\n",evutil_socket_error_to_string(EVUTIL_SOCKET_ERROR()));
    }

    if(bev)
        bufferevent_free(bev);
}

