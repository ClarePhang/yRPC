/* network_config.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-28
 * Author: Konishi
 * Email : konishi5202@163.com
 */

#include <stdio.h>
#include <errno.h>
#include <stdlib.h>

#include "inifile.h"
#include "network_config.h"

#define K_DEBUG   printf
#define K_INFO    printf
#define K_WARN    printf
#define K_ERROR   printf

#define GLOBALSECTION       "Global"
#define COMMTIMEOUTKEY      "CommunicateTimeout"
#define CONNECTTIMEOUTKEY   "ConnectTimeout"

#define IPKEY   "IPAddress"
#define PORTKEY "MonitorPort"

using namespace inifile;
static IniFile m_inifile;

NetworkConfig::NetworkConfig()
{
    path_init = false;
}

NetworkConfig::~NetworkConfig()
{
    path_init = false;
}

int NetworkConfig::setConfigProfile(const string &path)
{
    int ret = -1;
    
    if(path.empty())
    {
        K_ERROR("NetworkConfig : config-file path can not be NULL!\n");
        return -1;
    }
    
    ret = m_inifile.load(path);
    if(ret != 0)
    {
        path_init = false;
        K_ERROR("NetworkConfig : load %s config-file failed!\n", path.c_str());
        return -1;
    }
    
    path_init = true;

    if(!m_inifile.hasKey(GLOBALSECTION, string(COMMTIMEOUTKEY)))
    {
        K_ERROR("NetworkConfig : does't not have %s:%s config, please check!\n", GLOBALSECTION, COMMTIMEOUTKEY);
        return -1;
    }

    if(!m_inifile.hasKey(GLOBALSECTION, string(CONNECTTIMEOUTKEY)))
    {
        K_ERROR("NetworkConfig : does't not have %s:%s config, please check!\n", GLOBALSECTION, CONNECTTIMEOUTKEY);
        return -1;
    }
    
    return ret;
}

void NetworkConfig::getConnectTimeout(struct timeval *tv)
{
    int ret = -1;
    int timeout = 0;
    
    timeout = m_inifile.getIntValue(string(GLOBALSECTION), string(CONNECTTIMEOUTKEY),ret);
    tv->tv_sec = timeout/1000;
    tv->tv_usec = (timeout%1000)*1000;
}

void NetworkConfig::getCommunicateTimeout(struct timeval *tv)
{
    int ret = -1;
    int timeout = 0;
    
    timeout = m_inifile.getIntValue(string(GLOBALSECTION), string(COMMTIMEOUTKEY),ret);
    tv->tv_sec = timeout/1000;
    tv->tv_usec = (timeout%1000)*1000;
}

int NetworkConfig::getNetworkConfig(const string &section, SocketStruct &addr)
{
    int ret = -1;
    
    if(!m_inifile.hasSection(section))
    {
        K_ERROR("NetworkConfig : does't not have %s process config, please check!\n", section.c_str());
        return -1;
    }

    if(!m_inifile.hasKey(section, string(IPKEY)))
    {
        K_ERROR("NetworkConfig : does't not have %s:%s config, please check!\n", section.c_str(), IPKEY);
        return -1;
    }

    if(!m_inifile.hasKey(section, string(PORTKEY)))
    {
        K_ERROR("NetworkConfig : does't not have %s:%s config, please check!\n", section.c_str(), PORTKEY);
        return -1;
    }

    addr.ipaddr = m_inifile.getStringValue(section, string(IPKEY),ret);
    addr.port = m_inifile.getIntValue(section, string(PORTKEY),ret);
    
    return 0;
}

void NetworkConfig::printSection(void)
{
    IniFile::iterator it;

    K_INFO("NetworkConfig : Section:\n");
    for(it = m_inifile.begin();it != m_inifile.end(); ++it)
        K_INFO(" %s\n",it->first.c_str());
    K_INFO("\n");
}

void NetworkConfig::printConfiguration(void)
{
    IniFile::iterator it;
    IniSection::iterator iti;
    
    K_INFO("NetworkConfig : Configurations:\n");
    for(it = m_inifile.begin();it != m_inifile.end(); ++it)
    {
        K_INFO(" %s\n",it->first.c_str());
        for(iti = it->second->items.begin();iti != it->second->items.end(); ++iti)
        {
            K_INFO("  %s=%s\n", iti->key.c_str(), iti->value.c_str());
        }
    }
    K_INFO("\n");
}

