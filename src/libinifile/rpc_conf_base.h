/* rpc_conf_base.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2018-01-16
 * Author: Konishi
 * Email : konishi5202@163.com
 */

#ifndef RPC_CONF_BASE_H__
#define RPC_CONF_BASE_H__
#include <string>

#include "inifile.h"
#include "rpc_conf.h"

using namespace inifile;

enum CONFIG_LOAD_STATE{
    CONFIG_LOAD_INIT = 0,
    CONFIG_LOAD_SUCCESS,
    CONFIG_LOAD_FAILED,
};

enum CONFIG_CHECK_STATE{
    CONFIG_CHECK_INIT = 0,
    CONFIG_CHECK_SUCCESS,
    CONFIG_CHECK_FAILED,
};

class RPCConfigBase : public RPCConfig
{
public:
    RPCConfigBase();
    virtual ~RPCConfigBase();

public:
    virtual int setConfigProfile(const string &path);
    virtual int selfCheckValidity(string check_value);
    virtual int getProcessFromModule(string &process, const string &module);
    virtual int getProcessConfig(const string &process, ProcessConfig &process_config);
    virtual int getProcessNetConfig(const string &process, ProcessConfig &process_config);
    virtual int getDefaultConfiguration(DefaultGlobalConfig &default_config);
    virtual const string getRPCVersion(void);
    virtual int setRPCVersion(const string &version);
    CONFIG_CHECK_STATE getCheckState(void);

public:  // for test and debug
    void printSection(void);
    void printConfig(const string &section);
    void printAllConfig(void);
    void printAllConfigWithComment(void);

    void printDefaultConfig(void);
    void printProcessConfig(const string &process);

private:
    int getDefaultConfiguration(void);
    int getTimeUnitConversion(string &unit);
    CONFIG_LOAD_STATE getLoadState(void);

private:
    IniFile m_inifile;
    string m_conf_file;
    string m_rpc_version;
    string m_process_last;
    bool m_get_default_conf_flag;
    CONFIG_LOAD_STATE m_load_state;
    CONFIG_CHECK_STATE m_check_state;
    ProcessConfig m_process_config_last;
    DefaultGlobalConfig m_default_config;
};

#endif  // RPC_CONF_BASE_H__

