/* rpc_core.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-22
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#ifndef RPC_CORE_H__
#define RPC_CORE_H__
#include <string>
#include <pthread.h>

#include "rpc.h"
#include "queue.h"
#include "rpc_conf.h"
#include "uint_hash.h"
#include "threadpool.h"
#include "string_hash.h"
#include "comm_driver.h"
#include "pointer_list.h"
#include "rpc_observer.h"

using namespace std;

struct WorkerEntry{
    void *message;
    LIST_ENTRY(WorkerEntry) worker_next;
};
LIST_HEAD(WorkerHead, WorkerEntry);

#undef ANALYSERECEIVE
#ifdef ANALYSERECEIVE
enum AnalysePackage
{
    AP_INIT = 0,
    AP_HEAD = 1,
    AP_BODY_HEAD = 2,
    AP_BODY_DATA = 3,
};
#endif

Implement RPCCore : public ERPC
{
public:
    static RPCCore *getInstance(void);
    virtual int initRPC(const string &process_name, const string &conf_path = "");
    virtual int registerService(const string &service, ServiceHandler func);
    virtual int unregisterService(const string &service);
    virtual int setResponse(void *msg, void *response_data, size_t response_len);
    virtual int proxyCall(const string &module, const string &func, void *send, size_t slen, void *recv, size_t *rlen, struct timeval *tv = NULL);
    virtual int start(void);
    virtual int runUntilAskedToQuit(bool state);

public: // observer function
    virtual int createObserver(const string &observer);
    virtual int destroyObserver(const string &observer);
    virtual int invokeObserver(const string &observer, void *data, size_t len);
    virtual int registerObserver(const string &module, const string &observer, ObserverHandler func, struct timeval *tv = NULL);
    virtual int unregisterObserver(const string &module, const string &observer, struct timeval *tv = NULL);

private:
    static size_t getUserData(void *msg, void **data_ptr, size_t *data_len);
    
private:
    RPCCore();
    virtual ~RPCCore();

private:
    static void *sendThread(void *arg);
    static unsigned int getFrameID(void);
    static int sendLinkMessage(void *fdp);
    static int recvLinkMessage(void *fdp, void *msg);
    static int errorACKMessage(void *fdp, void *msg);
    static void releaseRPCMessage(void *arg);
    static void signalHandler(int signo);
    static void businessHandler(void *msg);
    static void addSendWorker(void *worker);
    static int registerObserverHandler(void *fdp, void *msg);
    static int unregisterObserverHandler(void *fdp, void *msg);
    static int analyseReceiveData(void *fdp, const void *data, size_t len);
    static int eventHandler(unsigned int type, void *fdp, void *data, size_t len);
    
private:
    pthread_t m_send_thread_id;

private:
    static string m_process;
    static bool m_run_state;
    static bool m_conf_state;
    static RPCConfig *m_conf;
    static RPCCore *m_rpc_core;
    static UINTHash m_proxy_hash;
    static StringHash m_func_hash;
    static COMMDriver m_comm_base;
    static ObserverHash m_observer;
    static ThreadPool *m_threadpool;
    static struct timeval m_conn_tv;
    static struct timeval m_comm_tv;
    static ProcessConfig m_self_conf;
    static StringHash m_connect_hash;
    static PointerList m_connect_list;
    static pthread_cond_t m_send_cond;
    static pthread_mutex_t m_send_mutex;
    static struct WorkerHead m_work_head;
    static volatile unsigned int m_frame_id;
};

#endif // RPC_CORE_H__

