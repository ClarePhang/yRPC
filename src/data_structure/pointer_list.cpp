/* nil_pointer_list.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-09
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#include <stdio.h>

using namespace std;

#include "pointer_list.h"

#define K_DEBUG   printf
#define K_INFO    printf
#define K_WARN    printf
#define K_ERROR   printf

PointerList::PointerList()
{
    m_list.clear();
}

PointerList::~PointerList()
{
    m_list.clear();
}

int PointerList::size(void)
{
    return m_list.size();
}

void PointerList::clear(void)
{
    m_list.clear();
}

bool PointerList::empty(void)
{
    return m_list.empty();
}

void *PointerList::begin(void)
{
    it = m_list.begin();
    return *it;
}

void *PointerList::next(void)
{
    return *(++it);
}

bool PointerList::hasNext(void)
{
    list<void *>::iterator itp = it;
    if((++itp) == m_list.end())
        return false;
    return true;
}

void *PointerList::find(void *addr)
{
    for(it = m_list.begin(); it != m_list.end(); it++)
    {
        if(addr == *it)
            return *it;
    }

    return NULL;
}

int PointerList::insert(void *addr)
{
    m_list.push_back(addr);
//    m_list.push_front(addr);
//    m_list.insert(m_list.begin(), addr);
//    m_list.insert(m_list.end(), addr);
    return 0;
}

int PointerList::remove(void *addr)
{
    m_list.remove(addr);
    return 0;
}

