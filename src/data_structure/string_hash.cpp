/* string_hash.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-09
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#include <stdio.h>

#include "string_hash.h"

#define K_DEBUG   printf
#define K_INFO    printf
#define K_WARN    printf
#define K_ERROR   printf

StringHash::StringHash()
{
    string_map.clear();
}

StringHash::~StringHash()
{
    string_map.clear();
}

void StringHash::print(void)
{
    K_INFO("Hash Table:\n");
    for(it = string_map.begin(); it != string_map.end(); it++)
        K_INFO("%s => %p\n", it->first.c_str(), it->second);
}

int StringHash::size(void)
{
    return string_map.size();
}

void StringHash::clear(void)
{
    string_map.clear();
}

bool StringHash::empty(void)
{
    return string_map.empty();
}

void *StringHash::find(const string &key)
{
    it = string_map.find(key);
    return (it == string_map.end()) ? NULL : it->second;
}

int StringHash::remove(const string &key)
{
    it = string_map.find(key);
    if(it == string_map.end())
        return 0;
    string_map.erase(it);
    return 0;
}

void StringHash::remove(void *value)
{
    for(it = string_map.begin(); it != string_map.end(); it++)
    {
        if(value == it->second)
        {
            string_map.erase(it->first);
            break;
        }
    }
}

int StringHash::insert(const string &key, void *value)
{
    it = string_map.find(key);
    if(it != string_map.end()) // exsit
        return 1;

    string_map[key] = value;
//    string_map.insert(std::pair<string, void *>(key, value));
    return 0;
}

int StringHash::change(const string &key, void *value)
{
    it = string_map.find(key);
    if(it == string_map.end()) // not exsit
        return -1;
    string_map[key] = value;
    return 0;
}

