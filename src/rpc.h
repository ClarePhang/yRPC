/* rpc.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-22
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#ifndef RPC_H__
#define RPC_H__
#include <string>

using namespace std;

#define Interface class
#define Implements class

typedef void (*ServiceHandler)(void *arg);
typedef void (*ObserverHandler)(void *arg);

Interface ERPC
{
public:
    ERPC();
    virtual ~ERPC();
    
public:
    static ERPC *getInstance(void);
    virtual int setProcessName(const char *process) = 0;
    virtual int setConfigProfile(const string &network, const string &module) = 0;
    virtual int initRPC(const char *service_name) = 0;
    virtual int initRPC(const char *service_name, const char *conf_path) = 0;
    virtual int registerService(const char *service, ServiceHandler func) = 0;
    virtual int unregisterService(const char *service) = 0;
    virtual int setResponse(void *msg, void *response_data, size_t response_len) = 0;
    virtual int proxyCall(const string &module, const string &func, void *send, size_t slen, void *recv, size_t *rlen) = 0;
    virtual int start(void) = 0;
    virtual int runUntilAskedToQuit(bool state) = 0;

public: // observer function
    virtual int createObserver(const char *observer) = 0;
    virtual int destroyObserver(const char *observer) = 0;
    virtual int invokeObserver(const char *observer, void *data, size_t len) = 0;
    virtual int registerObserver(const string &module, const char *observer, ObserverHandler func) = 0;
    virtual int unregisterObserver(const string &module, const char *observer) = 0;

public:
    static void getUserData(void *msg, void **data_ptr, size_t *data_len);

private:
    static ERPC *m_erpc;
};

#endif // RPC_H__

