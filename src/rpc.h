/* rpc.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-22
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#ifndef RPC_H__
#define RPC_H__
#include <string>

using namespace std;

#define Interface class
#define Implement class

typedef void (*ServiceHandler)(void *msg, void *data, size_t len);
typedef void (*ObserverHandler)(void *msg, void *data, size_t len);

class ERPC
{
public:
    ERPC();
    virtual ~ERPC();
    
public:
    static ERPC *getInstance(void);
    virtual int initRPC(const string &process_name, const string &conf_path = "") = 0;
    virtual int registerService(const string &service, ServiceHandler func) = 0;
    virtual int unregisterService(const string &service) = 0;
    virtual int setResponse(void *msg, void *response_data, size_t response_len) = 0;
    virtual int proxyCall(const string &module, const string &func, void *send, size_t slen, void *recv, size_t *rlen, struct timeval *tv = NULL) = 0;
    virtual int start(void) = 0;
    virtual int runUntilAskedToQuit(bool state) = 0;

public: // observer function
    virtual int createObserver(const string &observer) = 0;
    virtual int destroyObserver(const string &observer) = 0;
    virtual int invokeObserver(const string &observer, void *data, size_t len) = 0;
    virtual int registerObserver(const string &module, const string &observer, ObserverHandler func, struct timeval *tv = NULL) = 0;
    virtual int unregisterObserver(const string &module, const string &observer, struct timeval *tv = NULL) = 0;

private:
    static ERPC *m_erpc;
};

#endif // RPC_H__

