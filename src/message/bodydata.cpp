/* bodydata.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-22
 * Author: zhangqiyin/Konishi
 * Email : zhangqiyin@hangsheng.com.cn
 */
#include <stdlib.h>
#include <string.h>
#include "bodydata.h"

BodyData::BodyData()
{
    length = 0;
    sender.clear();
    recver.clear();
    module.clear();
    function.clear();
}

BodyData::~BodyData()
{
    length = 0;
    sender.clear();
    recver.clear();
    module.clear();
    function.clear();
}

size_t BodyData::size(void)
{
    return this->length;
}

void BodyData::setSender(const string &sender)
{
    this->sender = sender;
}

string BodyData::getSender(void)
{
    return this->sender;
}

void BodyData::setRecver(const string &recver)
{
    this->recver = recver;
}

string BodyData::getRecver(void)
{
    return this->recver;
}

void BodyData::setModule(const string &module)
{
    this->module = module;
}

string BodyData::getModule(void)
{
    return this->module;
}

void BodyData::setFunction(const string &func)
{
    this->function = func;
}

string BodyData::getFunction(void)
{
    return this->function;
}

int BodyData::setApplyBodyData(void **data, void *send, unsigned int len)
{
    unsigned int i = 0;
    unsigned int size = 0;
    unsigned char *ptr = NULL;

    if(this->sender.size())
        size += sender.size() + 2 + 1;
    if(this->recver.size())
        size += recver.size() + 2 + 1;
    if(this->module.size())
        size += module.size() + 2 + 1;
    if(this->function.size())
        size += function.size() + 2 + 1;

    size += len + 2 + 4;
    this->length = size;
    *data = (void *)malloc(size);
    if(*data == NULL)
        return -1;

    ptr = (unsigned char *)*data;

    if(this->sender.size())
    {
        ptr[0] = (SENDERTAG>>8) & 0xFF;
        ptr[1] = SENDERTAG & 0xFF;
        ptr[2] = sender.size();
        memcpy(&ptr[3], sender.c_str(), sender.size());
        i += 3 + sender.size();
    }
    if(this->recver.size())
    {
        ptr[i] = (RECVERTAG>>8) & 0xFF;
        ptr[i+1] = RECVERTAG & 0xFF;
        ptr[i+2] = recver.size();
        memcpy(&ptr[i+3], recver.c_str(), sender.size());
        i += 3 + sender.size();
    }
    if(this->module.size())
    {
        ptr[i] = (MODULETAG>>8) & 0xFF;
        ptr[i+1] = MODULETAG & 0xFF;
        ptr[i+2] = module.size();
        memcpy(&ptr[i+3], module.c_str(), module.size());
        i += 3 + module.size();
    }
    if(this->function.size())
    {
        ptr[i] = (FUNCTIONTAG>>8) & 0xFF;
        ptr[i+1] = FUNCTIONTAG & 0xFF;
        ptr[i+2] = function.size();
        memcpy(&ptr[i+3], function.c_str(), function.size());
        i += 3 + function.size();
    }
    ptr[i] = (BODYDATATAG>>8) & 0xFF;
    ptr[i+1] = BODYDATATAG & 0xFF;
    ptr[i+2] = (len>>24) & 0xFF;
    ptr[i+3] = (len>>16) & 0xFF;
    ptr[i+4] = (len>>8) & 0xFF;
    ptr[i+5] = len & 0xFF;
    memcpy(&ptr[i+6], send, len);
    
    return 0;
}

void BodyData::getApplyBodyData(void *data, void **recv, unsigned int *len)
{
    bool loop = true;
    unsigned char *ptr = (unsigned char *)data;

    while(loop)
    {
        switch(ptr[0])
        {
            case (SENDERTAG>>8) & 0xFF:
                this->sender.append((const char *)&ptr[3],ptr[2]);
                ptr += ptr[2] + 3;
                break;
                
            case (RECVERTAG>>8) & 0xFF:
                this->recver.append((const char *)&ptr[3],ptr[2]);
                ptr += ptr[2] + 3;
                break;
                
            case (MODULETAG>>8) & 0xFF:
                this->module.append((const char *)&ptr[3],ptr[2]);
                ptr += ptr[2] + 3;
                break;
                
            case (FUNCTIONTAG>>8) & 0xFF:
                this->function.append((const char *)&ptr[3],ptr[2]);
                ptr += ptr[2] + 3;
                break;
                
            case (BODYDATATAG>>8) & 0xFF:
                if(len)
                    *len = ptr[2]<<24 | ptr[3]<<16 | ptr[4]<<8 | ptr[5];
                if(recv)
                    *recv = (void *)&ptr[6];
                loop = false;
                break;
            default:
                break;
        }
    }
}

