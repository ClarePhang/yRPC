/* message.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-23
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#ifndef MESSAGE_H__
#define MESSAGE_H__
#include "body_head.h"
#include "message_head.h"

class Message
{
public:
    Message();
    ~Message();

public:
    void initLinkRequestMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initLinkResponseMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initBeatRequestMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initBeatResponseMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initApplyRequestMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initApplyResponseMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initObserverRequestMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initObserverResponseMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    void initObserverInvokeMessage(struct timespec *tp, unsigned int msgID, unsigned int statusCode);
    
public:
    void getMessageHeadFromData(const void *data);
    static void getMessageHeadFromData(const void *data, MessageHeadStr *msg);

public:
    bool checkResponseStatus(void);
    unsigned int getMessageID(void);
    MESSAGE_TYPE getMessageType(void);
    unsigned int getStatusCode(void);
    struct timespec getTimeoutTP(void);
    void setSender(const string &sender);
    string getSender(void);
    void setRecver(const string &recver);
    string getRecver(void);
    void setModule(const string &module);
    string getModule(void);
    void setFunction(const string &func);
    string getFunction(void);
    void setUserData(void *data, size_t len);
    void getUserData(void **data, size_t *len);
    void getBodyHead(void *data);
    void setBodyHead(const string &sender, const string recver, const string &module, const string function);

public:
    int mallocBodyData(size_t user_len);
    int mallocBodyData(void *user_data, size_t user_len);
    void releaseBodyData(void);

public:
    void viewBodyHead(void);
    void viewMessageHead(void);
    void updateBodySize(void);
    size_t getBodySize(void);
    size_t getBodyHeadSize(void);
    size_t getMessageSize(void);
    int serializeMessage(void **data, size_t *len);
    void releaseSerializeMessage(void *data);

private:
    void *m_user_data;
    size_t m_user_data_len;
    BodyHead m_body_head;
    MessageHead m_message_head;
};

#endif // MESSAGE_H__

