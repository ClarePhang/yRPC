/* message.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-23
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#ifndef MESSAGE_H__
#define MESSAGE_H__
#ifdef __cplusplus
extern "C" {
#endif

#include <time.h>

#define MESSAGE_MAGIC_NUM   0xF55F

#define MESSAGE_MAJOR_VERSION   0
#define MESSAGE_MINOR_VERSION   1

#define MESSAGE_HEAD_SIZE       32

#define getUnsignedIntData(ptr)     ((ptr)[0]<<24 | (ptr)[1]<<16 | (ptr)[2]<<8 | (ptr)[3])
#define getUnsignedShortData(ptr)   ((ptr)[0]<<8 | (ptr)[1])
#define getMESSAGETYPE(ch)          ((MESSAGE_TYPE)(((ch)>>4) & 0xF))
#define getSERIALIZETYPE(ch)        ((SERIALIZE_TYPE)((ch) & 0xF))
#define getONEWAYSTATUS(ch)         ((ch) & 0x80)
#define getRESPONSESTATUS(ch)       ((ch) & 0x40)

enum MESSAGE_TYPE{
    MT_MIN_PK   = 0,
    MT_LINK_PK  = 1,
    MT_BEAT_PK  = 2,
    MT_APPLY_PK = 3,
    MT_MAX_PK   = 4
};

enum SERIALIZE_TYPE{
    ST_MIN_BD   = 0,
    ST_XML_BD   = 1,
    ST_BIN_BD   = 2,
    ST_JSON_BD  = 3,
    ST_USER_BD  = 4,
    ST_MAX_BD   = 5
};

typedef struct{
    unsigned int magic:16;
    unsigned int head_size:16;
    unsigned char version;
    MESSAGE_TYPE message_type:4;
    SERIALIZE_TYPE serialize_type:4;
    bool one_way:1;   // 0, need back, 1, not need
    bool response:1;  // 0, request, 1, reponse
    struct timespec timesp;
    unsigned int status_code:16;
    unsigned int message_id;
    //    unsigned char Reserved[12];
    unsigned int body_size;
    void *body_data;
}MessageStr;

extern void initMessage(MessageStr *msg);
extern int mallocMessage(MessageStr **msg);
extern void releaseMessage(MessageStr *msg);
extern void setMessageType(MessageStr *msg, MESSAGE_TYPE type);
extern MESSAGE_TYPE getMessageType(MessageStr *msg);
extern void setSerializeType(MessageStr *msg, SERIALIZE_TYPE type);
extern SERIALIZE_TYPE getSerializeType(MessageStr *msg);
extern void setOnewayFlag(MessageStr *msg, bool flag);
extern bool judgeOneway(MessageStr *msg);
extern void setResponseFlag(MessageStr *msg, bool flag);
extern bool judgeResponse(MessageStr *msg);
extern void setTimeout(MessageStr *msg, struct timespec *tv);
extern void setStatusCode(MessageStr *msg, unsigned int code);
extern unsigned int getStatusCode(MessageStr *msg);
extern void setMessageID(MessageStr *msg, unsigned int id);
extern unsigned int getMessageID(MessageStr *msg);

extern void setBodyData(MessageStr *msg, void *data, unsigned int size);
extern void getBodyData(MessageStr *msg, void **data, unsigned int *size);

extern void printMessageHead(MessageStr *head);
extern int getHeadFromData(MessageStr *head, const void *data);
extern int getDataFromHead(const void *data, MessageStr *head);

extern void initLinkRequestMsg(MessageStr *msg, struct timespec *tp, unsigned int msgID);
extern int mallocLinkRequestMsg(MessageStr **msg, struct timespec *tp, unsigned int msgID);
extern void initLinkResponseMsg(MessageStr *msg, struct timespec *tp, unsigned int msgID);
extern int mallocLinkResponseMsg(MessageStr **msg, struct timespec *tp, unsigned int msgID);
extern void initBeatRequestMsg(MessageStr *msg, struct timespec *tp, unsigned int msgID);
extern int mallocBeatRequestMsg(MessageStr **msg, struct timespec *tp, unsigned int msgID);
extern void initBeatResponseMsg(MessageStr *msg, struct timespec *tp, unsigned int msgID);
extern int mallocBeatResponseMsg(MessageStr **msg, struct timespec *tp, unsigned int msgID);
extern void initApplyRequestMsg(MessageStr *msg, struct timespec *tp, unsigned int msgID);
extern int mallocApplyRequestMsg(MessageStr **msg, struct timespec *tp, unsigned int msgID);
extern void initApplyResponseMsg(MessageStr *msg, struct timespec *tp, unsigned int msgID);
extern int mallocApplyResponseMsg(MessageStr **msg, struct timespec *tp, unsigned int msgID);

extern int serializeMessage(char **serialize, MessageStr *msg, unsigned int *slen);
extern void releaseSerializeMessage(char *serialize);
extern void deserializMessage();

#ifdef __cplusplus
}
#endif

#endif

