/* message_head.h
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-23
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#ifndef MESSAGE_HEAD_H__
#define MESSAGE_HEAD_H__
#include <time.h>

#define MESSAGE_MAGIC_NUM           0xF55F
#define MAGICNUM_STR_LENGTH         2

#define MESSAGE_MAJOR_VERSION   0
#define MESSAGE_MINOR_VERSION   1

#define MESSAGE_HEAD_SIZE       32
#define RESERVED_BYTE_NUM       12

enum MESSAGE_TYPE{
    MT_MIN_PK   = 0,
    MT_LINK_PK  = 1,
    MT_BEAT_PK  = 2,
    MT_APPLY_PK = 3,
    MT_OBSER_PK = 4,
    MT_MAX_PK   = 5
};

enum SERIALIZE_TYPE{
    ST_MIN_BD   = 0,
    ST_XML_BD   = 1,
    ST_BIN_BD   = 2,
    ST_JSON_BD  = 3,
    ST_USER_BD  = 4,
    ST_MAX_BD   = 5
};

typedef struct{
    unsigned int magic:16;
    unsigned int head_size:16;
    unsigned char version;
    MESSAGE_TYPE message_type:4;
    SERIALIZE_TYPE serialize_type:4;
    bool one_way:1;   // 0, need back, 1, not need
    bool response:1;  // 0, request, 1, reponse
    unsigned char Reservedbit:6;  // reserver 6 bits
    struct timeval timevl;
    unsigned int status_code:16;
    unsigned int message_id;
    unsigned char Reservedbyte[RESERVED_BYTE_NUM]; // reserver 12 bytes
    unsigned int body_size;
}MessageHeadStr;

class MessageHead
{
public:
    MessageHead(){};
    ~MessageHead(){};

public:
    void SerializeMessageHead(void *data);
    void DeserializeMessageHead(const void *data);
    static void SerializeMessageHead(const MessageHeadStr *msg, void *data);
    static void DeserializeMessageHead(const void *data, MessageHeadStr *msg);

public:
    void init(void);
    void view(void);
    void setMessageType(MESSAGE_TYPE type);
    MESSAGE_TYPE getMessageType(void);
    void setSerializeType(SERIALIZE_TYPE type);
    SERIALIZE_TYPE getSerializeType(void);
    void setOnewayStatus(bool flag);
    bool getOnewayStatus(void);
    void setResponseStatus(bool flag);
    bool getResponseStatus(void);
    void setTimeoutTV(struct timeval *tv);
    struct timeval getTimeoutTV(void);
    void setStatusCode(unsigned int code);
    unsigned int getStatusCode(void);
    void setMessageID(unsigned int id);
    unsigned int getMessageID(void);
    void setBodySize(unsigned int size);
    unsigned int getBodySize(void);

public:
    void initLinkRequestMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initLinkResponseMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initBeatRequestMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initBeatResponseMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initApplyRequestMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initApplyResponseMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initObserverRequestMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initObserverResponseMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    void initObserverInvokeMsg(struct timeval *tv, unsigned int msgID, unsigned int statusCode);
    
private:
    bool checkMagicNum(void);
    bool checkVersion(void);
    bool checkHeadSize(void);
    bool checkMessageType(void);
    bool checkSerializeType(void);

private:
    MessageHeadStr m_message_head; 
};

#endif // MESSAGE_HEAD_H__

