/* body_head.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-23
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#include <stdio.h>
#include <string.h>

#include "body_head.h"

#define K_DEBUG   printf
#define K_INFO    printf
#define K_WARN    printf
#define K_ERROR   printf

#define SENDERTAG       0x534E  // SN
#define RECVERTAG       0x524E  // RN
#define MODULETAG       0x4D4E  // MN
#define FUNCTIONTAG     0x464E  // FN
#define BODYDATATAG     0x4244  // BD

#define BODY_MAGIC_NUM_LENGTH   2
#define SENDERTAG_LENGTH        (2 + 1)
#define RECVERTAG_LENGTH        (2 + 1)
#define MODULETAG_LENGTH        (2 + 1)
#define FUNCTIONTAG_LENGTH      (2 + 1)
#define BODYDATATAG_LENGTH      2 

BodyHead::BodyHead()
{
    m_sender.clear();
    m_recver.clear();
    m_module.clear();
    m_function.clear();
}

BodyHead::~BodyHead()
{
    m_sender.clear();
    m_recver.clear();
    m_module.clear();
    m_function.clear();
}

void BodyHead::view(void)
{
    K_INFO("Message : Body head :\n");
    if(m_sender.size())
        K_INFO("      Sender : %s\n", m_sender.c_str());
    if(m_recver.size())
        K_INFO("      Recver : %s\n", m_recver.c_str());
    if(m_module.size())
        K_INFO("      Module : %s\n", m_module.c_str());
    if(m_function.size())
        K_INFO("      Function : %s\n", m_function.c_str());
}

void BodyHead::clear(void)
{
    m_sender.clear();
    m_recver.clear();
    m_module.clear();
    m_function.clear();
}

size_t BodyHead::size(void)
{
    size_t body_length = BODY_MAGIC_NUM_LENGTH;
    if(m_sender.size())
        body_length += m_sender.size() + SENDERTAG_LENGTH;
    if(m_recver.size())
        body_length += m_recver.size() + RECVERTAG_LENGTH;
    if(m_module.size())
        body_length += m_module.size() + MODULETAG_LENGTH;
    if(m_function.size())
        body_length += m_function.size() + FUNCTIONTAG_LENGTH;
    body_length += BODYDATATAG_LENGTH;
    return body_length;
}

void BodyHead::setSender(const string &sender)
{
    this->m_sender = sender;
}

string BodyHead::getSender(void)
{
    return this->m_sender;
}

void BodyHead::setRecver(const string &recver)
{
    this->m_recver = recver;
}

string BodyHead::getRecver(void)
{
    return this->m_recver;
}

void BodyHead::setModule(const string &module)
{
    this->m_module = module;
}

string BodyHead::getModule(void)
{
    return this->m_module;
}

void BodyHead::setFunction(const string &func)
{
    this->m_function = func;
}

string BodyHead::getFunction(void)
{
    return this->m_function;
}

bool BodyHead::checkMagicNum(void *data)
{
    unsigned char *ptr = (unsigned char *)data;

    if(BODY_MAGIC_NUM != (ptr[0]<<8 | ptr[1]))
    {
        K_WARN("Message : can't recognition body head!\n");
        return false;
    }
    return true;
}

void BodyHead::SerializeBodyHead(void *data)
{
    unsigned char *ptr = (unsigned char *)data;

    ptr[0] = (BODY_MAGIC_NUM>>8) & 0xFF;
    ptr[1] = BODY_MAGIC_NUM & 0xFF;
    ptr += BODY_MAGIC_NUM_LENGTH;
    
    if(this->m_sender.size())
    {
        ptr[0] = (SENDERTAG>>8) & 0xFF;
        ptr[1] = SENDERTAG & 0xFF;
        ptr[2] = m_sender.size();
        memcpy(&ptr[3], m_sender.c_str(), m_sender.size());
        ptr += SENDERTAG_LENGTH + m_sender.size();
    }

    if(this->m_recver.size())
    {
        ptr[0] = (RECVERTAG>>8) & 0xFF;
        ptr[1] = RECVERTAG & 0xFF;
        ptr[2] = m_recver.size();
        memcpy(&ptr[3], m_recver.c_str(), m_recver.size());
        ptr += RECVERTAG_LENGTH + m_recver.size();
    }

    if(this->m_module.size())
    {
        ptr[0] = (MODULETAG>>8) & 0xFF;
        ptr[1] = MODULETAG & 0xFF;
        ptr[2] = m_module.size();
        memcpy(&ptr[3], m_module.c_str(), m_module.size());
        ptr += MODULETAG_LENGTH + m_module.size();
    }

    if(this->m_function.size())
    {
        ptr[0] = (FUNCTIONTAG>>8) & 0xFF;
        ptr[1] = FUNCTIONTAG & 0xFF;
        ptr[2] = m_function.size();
        memcpy(&ptr[3], m_function.c_str(), m_function.size());
        ptr += FUNCTIONTAG_LENGTH + m_function.size();
    }

    ptr[0] = (BODYDATATAG>>8) & 0xFF;
    ptr[1] = BODYDATATAG & 0xFF;
}

void BodyHead::DeserializeBodyHead(void *data)
{
    bool loop = true;
    unsigned char *ptr = (unsigned char *)data;

    if(false == checkMagicNum(data))
        return ;
    ptr += BODY_MAGIC_NUM_LENGTH;
    while(loop)
    {
        switch(ptr[0])
        {
            case (SENDERTAG>>8) & 0xFF:
                this->m_sender.append((const char *)&ptr[3], ptr[2]);
                ptr += SENDERTAG_LENGTH + ptr[2];
                break;
            case (RECVERTAG>>8) & 0xFF:
                this->m_recver.append((const char *)&ptr[3], ptr[2]);
                ptr += RECVERTAG_LENGTH + ptr[2];
                break;
            case (MODULETAG>>8) & 0xFF:
                this->m_module.append((const char *)&ptr[3], ptr[2]);
                ptr += MODULETAG_LENGTH + ptr[2];
                break;
            case (FUNCTIONTAG>>8) & 0xFF:
                this->m_function.append((const char *)&ptr[3], ptr[2]);
                ptr += FUNCTIONTAG_LENGTH + ptr[2];
                break;
            case (BODYDATATAG>>8) & 0xFF:
                loop = false;
                break;
            default:
                loop = false;
                break;
        }
    }
}

