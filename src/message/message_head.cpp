/* message_head.cpp
 * DO NOT EDIT THIS FILE.
 * Date  : 2017-11-23
 * Author: Konishi
 * Email : konishi5202@163.com
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "message_head.h"

#define K_DEBUG   printf
#define K_INFO    printf
#define K_WARN    printf
#define K_ERROR   printf

#define initMAGICNUMBER(magic)       (magic = MESSAGE_MAGIC_NUM)
#define initMESSAGEHEADSIZE(m_size)  (m_size = MESSAGE_HEAD_SIZE)
#define initMESSAGEVERSION(version)  (version = MESSAGE_MAJOR_VERSION<<4 | MESSAGE_MINOR_VERSION)
#define initMESSAGETYPE(m_type)      (m_type = MT_LINK_PK)
#define initSERIALIZETYPE(s_type)    (s_type = ST_BIN_BD)
#define initONEWAYSTATUS(way)        (way = false)
#define initRESPONSESTATUS(res)      (res = false)
#define initTIMESPEC(tv)             (memset(&tv, 0, sizeof(struct timespec)))
#define initSTATUSCODE(code)         (code = 0)
#define initMESSAGEID(id)            (id = 0)
#define initBODYSIZE(b_size)         (b_size = 0)

#define initRESERVEDBIT(bit)         (bit = 0)
#define initRESERVEDBYTE(byte)       (memset(byte, 0, RESERVED_BYTE_NUM))


#define getUnsignedIntData(ptr)     (((ptr)[0])<<24 | ((ptr)[1])<<16 | ((ptr)[2])<<8 | ((ptr)[3]))
#define getUnsignedShortData(ptr)   (((ptr)[0])<<8 | ((ptr)[1]))

#define getMAGICNUMFROMSTR(ptr)             getUnsignedShortData(ptr)
#define getHEADSIZEFROMSTR(ptr)             getUnsignedShortData(ptr)
#define getVERSIONFROMSTR(ptr)              ((unsigned char)((ptr)[0]))
#define getMESSAGETYPEFROMSTR(ptr)          ((MESSAGE_TYPE)((((ptr)[0])>>4) & 0xF))
#define getSERIALIZETYPEFROMSTR(ptr)        ((SERIALIZE_TYPE)(((ptr)[0]) & 0xF))
#define getONEWAYSTATUSFROMSTR(way, ptr)    do{ \
                                                if(((ptr)[0]) & 0x80) \
                                                    way = true; \
                                                else \
                                                    way = false; \
                                            }while(0)
#define getRESPONSESTATUSFROMSTR(res, ptr)  do{ \
                                                if(((ptr)[0]) & 0x40) \
                                                    res = true; \
                                                else \
                                                    res = false; \
                                            }while(0)
#define getTIMESPECFROMSTR(tp, ptr)         do{ \
                                                tp.tv_sec = (((ptr)[0])<<4) | ((((ptr)[1])&0xF0)>>4); \
                                                tp.tv_nsec = ((((ptr)[1])&0xF)<<8) | ((ptr)[2]); \
                                            }while(0)
#define getSTATUSCODEFROMSTR(ptr)           getUnsignedShortData(ptr)
#define getMESSAGEIDFROMSTR(ptr)            getUnsignedIntData(ptr)
#define getRESERVEDBYTEFROMSTR(msg, ptr)
#define getBODYSIZEFROMSTR(ptr)             getUnsignedIntData(ptr)

#define setUnsignedIntData(msg, ptr, filed) do{ \
                                                ((ptr)[0]) = (((msg)->filed)>>24) & 0xFF; \
                                                ((ptr)[1]) = (((msg)->filed)>>16) & 0xFF; \
                                                ((ptr)[2]) = (((msg)->filed)>>8) & 0xFF; \
                                                ((ptr)[3]) = ((msg)->filed) & 0xFF; \
                                            }while(0)
#define setUnsignedShortData(msg, ptr, filed) do{ \
                                                ((ptr)[0]) = (((msg)->filed)>>8) & 0xFF; \
                                                ((ptr)[1]) = ((msg)->filed) & 0xFF; \
                                            }while(0)

#define setMAGICNUMTOSTR(msg, ptr)          setUnsignedShortData(msg, ptr, magic)
#define setHEADSIZETOSTR(msg, ptr)          setUnsignedShortData(msg, ptr, head_size)
#define setVERSIONTOSTR(msg, ptr)           (((ptr)[0]) = (msg)->version)
#define setMSGSERIALTYPETOSTR(msg, ptr)     (((ptr)[0]) = (msg)->message_type<<4 | (msg)->serialize_type)
#define setMSGFLAGTOSTR(msg, ptr)           ((((ptr)[0]) = (msg)->one_way<<7 | (msg)->response<<6) & 0xC0)
#define setTIMEOUTTOSTR(msg, ptr)           do{ \
                                                ((ptr)[0]) = ((msg)->timesp.tv_sec>>4) & 0xFF; \
                                                ((ptr)[1]) = ((msg)->timesp.tv_sec<<4 & 0xF0) | ((msg)->timesp.tv_nsec>>8 & 0xF); \
                                                ((ptr)[2]) = (msg)->timesp.tv_nsec & 0xFF; \
                                            }while(0)
#define setSTATUSCODETOSTR(msg, ptr)        setUnsignedShortData(msg, ptr, status_code)
#define setMESSAGEIDTOSTR(msg, ptr)         setUnsignedIntData(msg, ptr, message_id)
#define setRESERVEDBYTETOSTR(msg, ptr)      memset(ptr, 0, RESERVED_BYTE_NUM)
#define setBODYSIZETOSTR(msg, ptr)          setUnsignedIntData(msg, ptr, body_size)

#define HEADSIZE_STR_LENGTH         2
#define VERSION_STR_LENGTH          1
#define TYPE_STR_LENGTH             1
#define FLAG_STR_LENGTH             1
#define TIMEOUT_STR_LENGTH          3
#define STATUSCODE_STR_LENGTH       2
#define MESSAGEID_STR_LENGTH        4
#define RESERVED_STR_LENGTH         RESERVED_BYTE_NUM
#define BODYSIZE_STR_LENGTH         4

void MessageHead::SerializeMessageHead(void *data)
{
    unsigned char *ptr = (unsigned char *)data;

    setMAGICNUMTOSTR(&m_message_head, ptr);
    ptr += MAGICNUM_STR_LENGTH;
    setHEADSIZETOSTR(&m_message_head, ptr);
    ptr += HEADSIZE_STR_LENGTH;
    setVERSIONTOSTR(&m_message_head, ptr);
    ptr += VERSION_STR_LENGTH;
    setMSGSERIALTYPETOSTR(&m_message_head, ptr);
    ptr += TYPE_STR_LENGTH;
    setMSGFLAGTOSTR(&m_message_head, ptr);
    ptr += FLAG_STR_LENGTH;
    setTIMEOUTTOSTR(&m_message_head, ptr);
    ptr += TIMEOUT_STR_LENGTH;
    setSTATUSCODETOSTR(&m_message_head, ptr);
    ptr += STATUSCODE_STR_LENGTH;
    setMESSAGEIDTOSTR(&m_message_head, ptr);
    ptr += MESSAGEID_STR_LENGTH;
    setRESERVEDBYTETOSTR(&m_message_head, ptr);
    ptr += RESERVED_STR_LENGTH;
    setBODYSIZETOSTR(&m_message_head, ptr);
    ptr += BODYSIZE_STR_LENGTH;
}

void MessageHead::DeserializeMessageHead(const void *data)
{
    unsigned char *ptr = (unsigned char *)data;

    m_message_head.magic = getMAGICNUMFROMSTR(ptr);
    ptr += MAGICNUM_STR_LENGTH;
    m_message_head.head_size = getHEADSIZEFROMSTR(ptr);
    ptr += HEADSIZE_STR_LENGTH;
    m_message_head.version = getVERSIONFROMSTR(ptr);
    ptr += VERSION_STR_LENGTH;
    m_message_head.message_type = getMESSAGETYPEFROMSTR(ptr);
    m_message_head.serialize_type = getSERIALIZETYPEFROMSTR(ptr);
    ptr += TYPE_STR_LENGTH;
    getONEWAYSTATUSFROMSTR(m_message_head.one_way, ptr);
    getRESPONSESTATUSFROMSTR(m_message_head.response, ptr);
    ptr += FLAG_STR_LENGTH;
    getTIMESPECFROMSTR(m_message_head.timesp, ptr);
    ptr += TIMEOUT_STR_LENGTH;
    m_message_head.status_code = getSTATUSCODEFROMSTR(ptr);
    ptr += STATUSCODE_STR_LENGTH;
    m_message_head.message_id = getMESSAGEIDFROMSTR(ptr);
    ptr += MESSAGEID_STR_LENGTH;
    getRESERVEDBYTEFROMSTR(&m_message_head, ptr);
    ptr += RESERVED_STR_LENGTH;
    m_message_head.body_size = getBODYSIZEFROMSTR(ptr);
    ptr += BODYSIZE_STR_LENGTH;
}

void MessageHead::SerializeMessageHead(const MessageHeadStr *msg, void *data)
{
    unsigned char *ptr = (unsigned char *)data;

    setMAGICNUMTOSTR(msg, ptr);
    ptr += MAGICNUM_STR_LENGTH;
    setHEADSIZETOSTR(msg, ptr);
    ptr += HEADSIZE_STR_LENGTH;
    setVERSIONTOSTR(msg, ptr);
    ptr += VERSION_STR_LENGTH;
    setMSGSERIALTYPETOSTR(msg, ptr);
    ptr += TYPE_STR_LENGTH;
    setMSGFLAGTOSTR(msg, ptr);
    ptr += FLAG_STR_LENGTH;
    setTIMEOUTTOSTR(msg, ptr);
    ptr += TIMEOUT_STR_LENGTH;
    setSTATUSCODETOSTR(msg, ptr);
    ptr += STATUSCODE_STR_LENGTH;
    setMESSAGEIDTOSTR(msg, ptr);
    ptr += MESSAGEID_STR_LENGTH;
    setRESERVEDBYTETOSTR(msg, ptr);
    ptr += RESERVED_STR_LENGTH;
    setBODYSIZETOSTR(msg, ptr);
    ptr += BODYSIZE_STR_LENGTH;
}

void MessageHead::DeserializeMessageHead(const void *data, MessageHeadStr *msg)
{
    unsigned char *ptr = (unsigned char *)data;

    msg->magic = getMAGICNUMFROMSTR(ptr);
    ptr += MAGICNUM_STR_LENGTH;
    msg->head_size = getHEADSIZEFROMSTR(ptr);
    ptr += HEADSIZE_STR_LENGTH;
    msg->version = getVERSIONFROMSTR(ptr);
    ptr += VERSION_STR_LENGTH;
    msg->message_type = getMESSAGETYPEFROMSTR(ptr);
    msg->serialize_type = getSERIALIZETYPEFROMSTR(ptr);
    ptr += TYPE_STR_LENGTH;
    getONEWAYSTATUSFROMSTR(msg->one_way, ptr);
    getRESPONSESTATUSFROMSTR(msg->response, ptr);
    ptr += FLAG_STR_LENGTH;
    getTIMESPECFROMSTR(msg->timesp, ptr);
    ptr += TIMEOUT_STR_LENGTH;
    msg->status_code = getSTATUSCODEFROMSTR(ptr);
    ptr += STATUSCODE_STR_LENGTH;
    msg->message_id = getMESSAGEIDFROMSTR(ptr);
    ptr += MESSAGEID_STR_LENGTH;
    getRESERVEDBYTEFROMSTR(msg, ptr);
    ptr += RESERVED_STR_LENGTH;
    msg->body_size = getBODYSIZEFROMSTR(ptr);
    ptr += BODYSIZE_STR_LENGTH;
}

void MessageHead::init(void)
{
    initMAGICNUMBER(m_message_head.magic);
    initMESSAGEHEADSIZE(m_message_head.head_size);
    initMESSAGEVERSION(m_message_head.version);
    initMESSAGETYPE(m_message_head.message_type);     // maybe not the same
    initSERIALIZETYPE(m_message_head.serialize_type); // maybe not the same
    initONEWAYSTATUS(m_message_head.one_way);         // need ack, maybe not
    initRESPONSESTATUS(m_message_head.response);      // request, maybe not
    initTIMESPEC(m_message_head.timesp);
    initSTATUSCODE(m_message_head.status_code);
    initMESSAGEID(m_message_head.message_id);
    initBODYSIZE(m_message_head.body_size);

    initRESERVEDBIT(m_message_head.Reservedbit);
    initRESERVEDBYTE(m_message_head.Reservedbyte);
}

void MessageHead::view(void)
{
    K_INFO("Message Head:\n");
    K_INFO("  Magic  : 0x%04X\n", m_message_head.magic);
    K_INFO("  Size   : %u\n", m_message_head.head_size);
    K_INFO("  Version: %02X\n", m_message_head.version);
    K_INFO("  MType  : %02X\n", m_message_head.message_type);
    K_INFO("  SType  : %02X\n", m_message_head.serialize_type);
    K_INFO("  OneWay : %d\n", m_message_head.one_way);
    K_INFO("  Respon : %d\n", m_message_head.response);
    K_INFO("  Timeout: %ldS-%lduS\n", m_message_head.timesp.tv_sec, m_message_head.timesp.tv_nsec);
    K_INFO("  Code   : %04X\n", m_message_head.status_code);
    K_INFO("  MSGID  : %u\n", m_message_head.message_id);
    K_INFO("  BDSize : %u\n", m_message_head.body_size);
}

void MessageHead::setMessageType(MESSAGE_TYPE type)
{
    m_message_head.message_type = type;
}

MESSAGE_TYPE MessageHead::getMessageType(void)
{
    return m_message_head.message_type;
}

void MessageHead::setSerializeType(SERIALIZE_TYPE type)
{
    m_message_head.serialize_type = type;
}

SERIALIZE_TYPE MessageHead::getSerializeType(void)
{
    return m_message_head.serialize_type;
}

void MessageHead::setOnewayStatus(bool flag)
{
    m_message_head.one_way = flag;
}

bool MessageHead::getOnewayStatus(void)
{
    return m_message_head.one_way;
}

void MessageHead::setResponseStatus(bool flag)
{
    m_message_head.response = flag;
}

bool MessageHead::getResponseStatus(void)
{
    return m_message_head.response;
}

void MessageHead::setTimeoutTP(struct timespec *tp)
{
    m_message_head.timesp = *tp;
}

struct timespec MessageHead::getTimeoutTP(void)
{
    return m_message_head.timesp;
}

void MessageHead::setStatusCode(unsigned int code)
{
    m_message_head.status_code = code;
}

unsigned int MessageHead::getStatusCode(void)
{
    return m_message_head.status_code;
}

void MessageHead::setMessageID(unsigned int id)
{
    m_message_head.message_id = id;
}

unsigned int MessageHead::getMessageID(void)
{
    return m_message_head.message_id;
}

void MessageHead::setBodySize(unsigned int size)
{
    m_message_head.body_size = size;
}

unsigned int MessageHead::getBodySize(void)
{
    return m_message_head.body_size;
}

void MessageHead::initLinkRequestMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_LINK_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(false);
    setResponseStatus(false);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initLinkResponseMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_LINK_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(true);
    setResponseStatus(true);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initBeatRequestMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_BEAT_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(false);
    setResponseStatus(false);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initBeatResponseMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_BEAT_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(true);
    setResponseStatus(true);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initApplyRequestMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_APPLY_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(false);
    setResponseStatus(false);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initApplyResponseMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_APPLY_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(true);
    setResponseStatus(true);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initObserverRequestMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_OBSER_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(false);
    setResponseStatus(false);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initObserverResponseMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_OBSER_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(true);
    setResponseStatus(true);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

void MessageHead::initObserverInvokeMsg(struct timespec *tp, unsigned int msgID, unsigned int statusCode)
{
    setMessageType(MT_OBSER_PK);
    setSerializeType(ST_BIN_BD);
    setOnewayStatus(true);
    setResponseStatus(false);
    setTimeoutTP(tp);
    setStatusCode(statusCode);
    setMessageID(msgID);
}

bool MessageHead::checkMagicNum(void)
{
    if(MESSAGE_MAGIC_NUM != m_message_head.magic)
    {
        K_ERROR("Message : magic num does't match!\n");
        return false;
    }
    return true;
}

bool MessageHead::checkVersion(void)
{
    if((MESSAGE_MAJOR_VERSION != ((m_message_head.version>>4) & 0xF)) || (MESSAGE_MINOR_VERSION != (m_message_head.version & 0xF)))
    {
        K_ERROR("Message : version does't match!\n");
        return false;
    }
    return true;
}

bool MessageHead::checkHeadSize(void)
{
    if(MESSAGE_HEAD_SIZE != m_message_head.head_size)
    {
        K_ERROR("Message : head size does't match!\n");
        return false;
    }
    return true;
}

bool MessageHead::checkMessageType(void)
{
    if((m_message_head.message_type <= MT_MIN_PK) || (m_message_head.message_type >=MT_MAX_PK))
    {
        K_ERROR("Message : message type does't fit the bill!\n");
        return false;
    }
    return true;
}

bool MessageHead::checkSerializeType(void)
{
    if((m_message_head.serialize_type <= ST_MIN_BD) || (m_message_head.serialize_type >= ST_MAX_BD))
    {
        K_ERROR("Message : serialize type does't fit the bill!\n");
        return false;
    }
    return true;
}

